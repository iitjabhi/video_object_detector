name: Video Processing Pipeline CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Verify environment compatibility
      run: |
        echo "Verifying environment compatibility..."
        python -c "
        import sys
        import numpy as np
        import cv2
        import torch
        from ultralytics import YOLO
        print(f'Python: {sys.version}')
        print(f'NumPy: {np.__version__}')
        print(f'OpenCV: {cv2.__version__}')
        print(f'PyTorch: {torch.__version__}')
        print('Environment validated successfully')
        "
    
    - name: Run unit tests
      run: |
        pytest test_video_pipeline.py -v --tb=short
        
    - name: Test YOLO model loading
      run: |
        echo "Testing YOLO model download and loading..."
        python -c "
        from ultralytics import YOLO
        model = YOLO('yolov8n.pt')
        print('YOLO model loaded successfully')
        "
    
    - name: Clean up test artifacts
      if: always()
      run: |
        echo "Cleaning up test artifacts..."
        rm -f yolov8n.pt
        rm -rf __pycache__/
        rm -rf .pytest_cache/
        echo "Cleanup completed"

  integration-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run frame-based processing pipeline
      run: |
        echo "Running frame-based processing pipeline..."
        python video_pipeline.py golden_output/frames ci_output --client-id github-actions-ci
    
    - name: Validate pipeline output
      run: |
        echo "Validating pipeline output..."
        python validate_ci_output.py ci_output
    
    - name: Upload pipeline artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: pipeline-output-${{ github.sha }}
        path: |
          ci_output/
          logs/
        retention-days: 7
    
    - name: Clean up test artifacts
      if: always()
      run: |
        echo "Cleaning up test artifacts..."
        rm -rf ci_output/
        rm -rf logs/
        rm -f yolov8n.pt
        rm -rf __pycache__/
        echo "Cleanup completed"

  docker-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build Docker image
      run: |
        echo "Building Docker image..."
        docker build -t video-pipeline:ci .
    
    - name: Test Docker container
      run: |
        echo "Testing Docker container..."
        docker run --rm --entrypoint python video-pipeline:ci -c "
        import sys
        from video_pipeline import VideoProcessor
        print('Docker container works!')
        print(f'Python version: {sys.version}')
        "
    
    - name: Clean up Docker artifacts
      if: always()
      run: |
        echo "Cleaning up Docker artifacts..."
        docker rmi video-pipeline:ci || true
        docker system prune -f || true
        echo "Docker cleanup completed" 